package aero.geosystems.formats.rtcm3

import aero.geosystems.formats.IGnssDataConsumer
import aero.geosystems.formats.StructBinding
import aero.geosystems.formats.utils.asByteBuffer
import aero.geosystems.formats.utils.parseAsHex
import aero.geosystems.gnss.GnssUtils
import java.math.BigInteger
import java.nio.ByteBuffer
import java.util.*


const val PREAMBLE_VALUE: Short = 0xD3

/**
 * Created by aimozg on 27.12.2016.
 * Confidential.
 */
fun <T> T.formatAs(fmt: String): String = fmt.format(Locale.ENGLISH, this)

fun ByteArray.toHexString(): String = ("%0${size * 2}X".format(BigInteger(1, this)))
fun <T> Iterable<T>.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...") =
		joinToString(separator, prefix, postfix, limit, truncated) { format.format(Locale.ENGLISH, it) }

inline fun <T> Iterable<T>.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((T) -> Any?)) =
		map { transform(it).formatAs(format) }.joinToString(separator, prefix, postfix, limit, truncated)

fun IntArray.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...") =
		joinToString(separator, prefix, postfix, limit, truncated) { format.format(Locale.ENGLISH, it) }

inline fun IntArray.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Int) -> Any?)) =
		map { transform(it).formatAs(format) }.joinToString(separator, prefix, postfix, limit, truncated)

fun DoubleArray.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...") =
		joinToString(separator, prefix, postfix, limit, truncated) { format.format(Locale.ENGLISH, it) }

inline fun DoubleArray.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Double) -> Any?)) =
		map { transform(it).formatAs(format) }.joinToString(separator, prefix, postfix, limit, truncated)

fun BooleanArray.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...") =
		joinToString(separator, prefix, postfix, limit, truncated) { format.format(Locale.ENGLISH, it) }

inline fun BooleanArray.joinFormatted(format: String = "%s", separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Boolean) -> Any?)) =
		map { transform(it).formatAs(format) }.joinToString(separator, prefix, postfix, limit, truncated)

abstract class Rtcm3MessageDef<BINDING : StructBinding>(val mid_const: Int) : Rtcm3StructDef<BINDING>() {
	val preamble_def = UIntMember(8)
	val reserved0_def = DF001(6)
	val message_length_def = UIntMember(10)
	val message_id_def = DF002()

	val crc_def = tailMember { alignMember(8) { UIntMember(24) } }
}

abstract class Rtcm3Message(def: Rtcm3MessageDef<*>, bb: ByteBuffer, offset: Int) : StructBinding(def, bb, offset) {
	var preamble: Int by def.preamble_def
	/*get() = preamble_def.getValue(buffer)
	set(value) = preamble_def.setValue(value,buffer)*/
	var message_length: Int by def.message_length_def
	var message_id: Int by def.message_id_def

	var crc: Int by def.crc_def

	val totalMessageSize: Int
		get() = ((def as Rtcm3MessageDef).crc_def.pos.end(this) + 7) / 8

	override fun toString(): String {
		return "RTCM$message_id,${bodyToString()};" + String.format("%06X", crc)
	}

	open fun bodyToString(): String = "[$preamble,$message_length]"
	fun calcCrc(): Int {
		return rtcm3_crc(buffer, structOffset / 8, totalMessageSize - 3)
	}
}

class Rtcm3UnknownMessage(bb: ByteBuffer, offset: Int = 0) : Rtcm3Message(Companion, bb, offset) {
	var data by data_def.safe

	override fun bodyToString(): String {
		return super.bodyToString() + data.toHexString()
	}

	companion object : Rtcm3MessageDef<Rtcm3UnknownMessage>(0) {
		override fun binding(bb: ByteBuffer, structOffset: Int) = Rtcm3UnknownMessage(bb, structOffset)
		val data_def = VarByteArrayMember(message_length_def, -2)
	}
}

fun main(args: Array<String>) {
	/*val hexdump = arrayOf("",
			"D300763EC0E042FC", "8F407064BFCFC1FF", "A57FD2B1300C3FF7", "83FD5A2B5089CFE5",
			"31FEA1638045FB78", "5FE7C41756E2015B", "27F44CCFFD003760", "FF6C52C0887C0958",
			"BFA5DEFFFB8178F7", "FA025C5174DF6C19", "FD468B014BE704FF", "BA84B32A7702945F",
			"E899BFEB406FC9FE", "F8C5C27FCFFA937F",
			"44CDFF85FED7BFF7", "E0FF3BCF")
	println(hexdump)
	val bb = hexdump.parseAsHex().asByteBuffer()
	println(Rtcm1004.Companion)
	val msg = Rtcm1004(bb)
	println(msg)
	println(Rtcm1008.Companion)
	println(Rtcm1006.Companion)
	//println(Rtcm1004.Companion.crc_def.getUnsigned(msg))
	*/
	val hexdump1007 = "D300053EF0200000" + "E503E2"
	val hexmsm = "D300593F4000523A" + "C80281C056A285C0" + "5A4FF9F802000800" + "00000078FA674140" + "1702FE86D0800200" +
			"0000000A40853F74" + "05293FA1A2200080" + "0000000A9762454F" + "FEB1FFE9EA480020" + "0000000086E1C1C7" +
			"FEE2865A07D20008" + "00000000D95751D3" + "004043C0008A4759" + "0000200C03040000" + "000000200000007D" +
			"0508FD0D3ED72560" + "FD8E32D1EA236CED" + "C155209F3D8C0C05" + "2B8A061DF069AEDF" + "731AEFFFF81FA60B" +
			"6A0083CD75"
	val hexdump2 = "" +
			"D3002A4090200000" + "000D5452494D424C" + "452042443937300A" + "3030343934303034" +
			"39340A3535303343" + "3032353531FE36C9"
	val hexdump1074 = "" +
			"D300D64320201B0A" + "3DC20020503A4241" + "8000000020204080" + "5DDE56565D5A3A52" +
			"82627A22923A7A32" + "3B7AF691F770A115" + "B4EA30CF0F5FE135" + "83500667D343AD1B" +
			"5AFE3DCCB7395FCE" + "3E9D9E2154474752" + "FEB5E33086AC43AD" + "07E018A4399074C6" +
			"BD0D9E231647028D" + "C8021AE80C52B02C" + "877D3A21F5D203D6" + "101F12963C7BE4F1" +
			"901C36B340E08102" + "133F095FB7D5B32F" + "65B9432BD70D64DC" + "0FD1A04C1781563C" +
			"0759341C8BBF6A80" + "FDFA0805FBA41B7D" + "2069C6BFFFFFFFFF" + "FFFFFFFFFFFFFFFF" +
			"FC000000619E775D" + "8D96DB6C565785B4" + "D58D565D7E98E99E" + "4095AB22"
	val hexdump = arrayOf("D3", "007543C0202902E2",
			"8200207018300000", "000000204000007F", "DE94808C8A888E95", "9691A5D36F4F7FF2",
			"FE5FFCF2BE453CFE", "05E80DE044408FE1", "BF71E0040FF7DEF0", "38F2A12BC954CFC9",
			"A83F21DA03D2100D", "63B08E01C2522B0E", "E8A417DC9074E0BD", "A925F7D897FFFFFF",
			"FFFFFFC0016D1B65", "9E3AE38E17D968F4", "C096D30068446020", "1B0A3DC200202080",
			"0022000000000402", "20007FFA9A5A8299", "D422D93C870FEE2C", "9C778CCC99C934A6",
			"5B94BE198443E6C8", "071044FC8305F2FC", "7D99028191230644", "0D8AFA9858590149",
			"71E17B301F973080", "F4D902207FFFFFFF", "FFFF80063A73AEFE", "5D8ED7E1A89B5056",
			"D3008A4640201B09", "6300002037620000", "0000000020020000", "7FFFC142C1413F3D",
			"C0A3EC19ACC1BA13", "4E6941860CDD17CC", "19F02BF8423075C0", "9F80F39BE535CA1F",
			"903B7815501F58F6", "F1A282C5460A76E0", "15B62038D880DF36", "023E8008B1E012F7",
			"06CAFC1AFF502069", "C076A0808EEA01B6", "B790B0BE33927FFF", "FFFFFFFFFFFF8000",
			"4F64D44D65565D7D", "D95B6E7A8097A9C3", "D300133ED0200383", "850D0B6507AFA6ED",
			"5B0C2B232E22F504", "08D300D64320201B", "0A4D620020503A42", "4180000000202040",
			"805DDE56565D5A3A", "5282627A22923A7A", "323B7CF5923780A1", "15B4EA28CD0E6038",
			"79F1D8E378E4D5D0", "3FA1476E3F181E21", "865A8DD62A80599C", "26D85D92D425F3FA",
			"2074C5F31BEE7FDE", "915762D31AE976A8", "ED14F0A2B3C671BF", "1503FE5353FA36C7",
			"E7A33FAACC7EDCBE", "FB13801721306239", "02A60B0BAAE80AAA", "A0399782CF7B0BF3",
			"73E99AFFB33D3EFD", "66FDF5E3F6FE70B7", "BD432EFBF5A0F3DA", "123F641B7FFFFFFF",
			"FFFFFFFFFFFFFFFF", "FFFC000000619E77", "5F8596DB6C55D785", "B4558D765B7698EB",
			"9E404BBAA3D30075", "43C0202902F22200", "2070183000000000", "00204000007FDE94",
			"808C8A8890959791", "A5C3714E8032F75E", "8EEFC285C57F8BFB", "1A062684546E990C",
			"F33A36312462C3FA", "957FE9261051C381", "424806DB9C1989E0", "528A81644EF5B457",
			"C90BBF399CBBFA8E", "F11E3BFFFFFFFFFF", "FFC0016D3B65963A", "618E185968E4F486",
			"D300684460201B0A", "4D62002020800022", "0000000004022000", "7FFA9A5A8299D223",
			"597C7046909A0152", "4B0196332D7BACAF", "6056C8B34D46D40D", "DE815DF406684DE2",
			"F46157C0855E8186", "750FA96F9E8DCAD6", "50BA1ACA706DC1F8", "A65EFFFFFFFFFFFF",
			"80063A73AEDE5D8E", "D7E1A8040E6CD300", "8A4640201B0972A0", "0020376200000000",
			"0000200200007FFF", "C142C1413F3DC0A3", "EC19ACC1BA934E71", "3F858E771B0014CC",
			"21B06080B279FEF3", "B1E528C8518136FE", "CF6CDECE449E88F2", "032B9E0C1038108E",
			"E0243C01583E0422", "9F9E9B5E6A9C791B", "63E440FF820B7DFD", "277DEC8FF72D484B",
			"30C11D927FFFFFFF", "FFFFFFFF80004D64", "D44D65565B85D95B", "6E7A80493889D300",
			"D64320201B0A5D02", "0020503A42418000", "0000202040805DDE", "56565D5A3A528262",
			"7A22923A7A323B7C", "F4927790A115B4EA", "20CB0DE05FBF8064", "008EF671F377E7B0",
			"9EC17922E3FE797E", "1333BE6C18FAE205", "B278C53CF094E1AF", "CD9BA37B4897F260",
			"08C2BCC64F8C62FF", "2E7400A0AFFDBFFF", "6CFFFE9D7BF93DF0", "4316013DE7049823",
			"F79A1FE41C4339DD", "0DFA383FAD410DA2", "0274020A858FC36D", "CF1A883CA564F495",
			"D7D17E5005330064", "D205486018B0005E", "923FFFFFFFFFFFFF", "FFFFFFFFFFFFFC00",
			"0000619E775F8DB6", "5B6C56558DB45595", "565D7698EB9E4010", "F98FD3007543C020",
			"290301C200207018", "3000000000002040", "00007FDE94808C8A", "8890959891A5B373",
			"4D8052E05D30ED26", "C84E049212263408", "F01947730007205E", "0A6E1557028B3808",
			"FD00DA1403638A09", "E70025B7801763C0", "77B3FC8443FA4C5F", "FE9F024D250A688F",
			"FFFFFFFFFFFFC001", "753B65963AE39618", "5968222B5AD30068", "4460201B0A5D0200",
			"2020800022000000", "00040220007FFA9A", "5A8299D023D99C61", "7DB308462E893812",
			"A02657FDD802A00D", "42B3E5A18B79063A", "6819DA1E2CFE211E", "920479C781F2BFFA",
			"989FD26DDB276E15", "FFE85A97F84AC0FF", "FFFFFFFFFF80063A", "73AEDE5D8ED7E1A8",
			"8B2AB7D3008A4640", "201B098240002037", "6200000000000020", "0200007FFFC142C1",
			"413F3DC0A3EC19AC", "C1BA932E713D8590", "101E320FA417687E", "D0EF035D466EEE6B",
			"DAD9E2DBC216C45D", "7D40480044839218", "0DAA180B6A200FAA", "81D1760607703489",
			"20C2547B6C57ED84", "C7E3B0FF83BCFB4A", "9FECA59005C50007", "E3FFFFFFFFFFFFFF",
			"FF80004F64B44D65", "565B7DF95B6E7B00", "0619B6D300D64320", "201B0A6CA2002050",
			"3A42418000000020", "2040805DDE56565D", "5A3A5282627A2292", "3A7A323B7CF392B7",
			"A0A11634EA10C70D", "6087068EF21DAB08", "0A16A42E11CF43DA", "27A5F698EE523D04",
			"7EA7CF07ADF21DC4", "8707098E99281E58", "80B2A68D8D3F3A91", "35F86BB30DBC883A",
			"D8F0E6A10086B403", "044C0AD940DB5843", "9EF00E1C3FD8171F", "661043CE4E104C07",
			"F4B45FE1BE821909", "0919AC1D438081DF", "424DC40B37582C04", "5F52C67D9B20F4F0",
			"63D74FFF59127FFF", "FFFFFFFFFFFFFFFF", "FFFFFFFC00000063", "9E775F8DB65B6456",
			"5585B4559575DD76", "78EB9E604B0F53D3", "007543C020290311", "6200207018300000",
			"000000204000007F", "DE94808C8A889095", "9991C5A3754C8072", "D95BE2EA9B0BF68B",
			"98293263EB83DE60", "4D431BE68783BB87", "F20A80CC28D34F62", "7CFD852C0CF2A031",
			"E61FDC73FF8BF203", "56BC2B97B0C3CC80", "A08203B607FFFFFF", "FFFFFFC001753B65",
			"961AE19618596032", "CCF3D30068446020", "1B0A6CA200202080", "0022000000000402",
			"20007FFA9A5A8299", "D02459BC56B50D76", "FB0C076E8F0D1F30", "4F00A4F952021A84",
			"6E89137B178BED4E", "A5771280E5638395", "0B7D70704BC66117", "25DFFE7611346047",
			"69D7EF127FFFFFFF", "FFFF80063A73AEDE", "5F96D7E1A8E0C439", "D3008A4640201B09",
			"91E0002037620000", "0000000020020000", "7FFFC142C1413F3D", "C0A3EC19ACC1BB13",
			"0E713B8591A82162", "0A780D089CF12B5C", "BBF92BF7AEED5E44", "7085461BCC2C3BF1",
			"F79883F7F20F4180", "063ABFFAEC8249FC", "07E98FCA6D7F19E5", "7DBD09F6C790454C",
			"E10A2CF8A849E21C", "37C0603EF24FFFFF", "FFFFFFFFFFFF8000", "4F64D44D6555DD85",
			"F9DB6E7A808DAB39", "D300D64320201B0A", "7C420020503A4241", "8000000020204080",
			"5DDE56565D5A3A52", "82627A22923A7A32", "3B7EF29317A8A316", "34EA08C50C60BE4F",
			"FD857AD019AE39F0", "74AF000E3BBC68CE", "BA1E95C6619158A3", "495681C3C3D33D82",
			"7B8A02B20DA81CF1", "292276626605A20B", "07FC4EEFF5228FCF", "C741A0F7076D581C",
			"7D8F73B3BE005DF7", "A1F038A020E834BC", "63DCF2A24029C790", "B60B81BF0A07B1B3",
			"F7243FE9623FF70C", "01DC7C0698E0A096", "42D260049AD815F9", "E053B9FFFFFFFFFF",
			"FFFFFFFFFFFFFFFF", "FC000000639E775F", "8DB6DB6456558DB4", "559575DD7678EB9E",
			"401E8F3CD3007543", "C020290321020020", "7018300000000000", "204000007FDE9480",
			"8C8A8890959B11C5", "93774B80B2D65AEC", "E89F50FF159E453E", "9BCE33A3C9282E31",
			"FCB3BD0EFA98F278", "27C8B09FEB1B7FA7", "A71000703E1D5FA1", "D63EA17C0A2DBFDC",
			"F63F8946FEF51FFD", "0877FFFFFFFFFFFF", "C001753B65961AE1", "9617D9605A5E68D3",
			"00684460201B0A7C", "4200202080002200", "000000040220007F", "FA9A5A8299CE24D9",
			"FC47ECBFE65FEAC5", "A70B7E1813A04F47", "8E972181633C86AF", "7FF64E00C9BDC141",
			"80AC7382B14D78F2", "179D09DE5C32D4D6", "D00C6BA83446D793", "907FFFFFFFFFFF80",
			"063A73AEDE5D8ED7", "E1A898DFFCD3008A", "4640201B09A18000", "2037620000000000",
			"0020020000").joinToString("")
	val hex4 = "" +
			"D300473EC00070DA" + "6182402422053803" + "FDFFD13248002000" + "000000E2C1379033" + "83FE8D8C40010000" +
			"00000569E9838165" + "C7C4FAF200080000" + "0000F2F92B740506" + "BFA75D9000400000" + "00002BC34DD30059" +
			"3F4000636A320281" + "400B499C3FF7DFFA" + "7B22000800000000" + "398CB3F7A020D1FE" + "8704800200000000" +
			"0C19C343B7FD907F" + "A5A7200080000000" + "041A02F773005AAF" + "E927C80020000000" + "0122B1A0CB8000F0" +
			"3A0C420008000000" + "0054053AD3003743" + "200070DA61820020" + "0540000200000000" + "200000007A7A3222" +
			"776862899AA15E42" + "A2C27AFE2F813313" + "FAA850067B1F19EC" + "7FFF85996578696E" + "ACD3004043C000AC" +
			"6D4640002003E000" + "0000000000200000" + "007D2909210139F9" + "E380DDE4CA0A43F2" + "0C902EFA411B0182" +
			"76041AB60436FFFF" + "EC3EFE4BFFFC782A" + "C28C6D00E1478E"
	val hexmsm2 = "" +
			"D300493F40006AAE" + "0F0201400C8C2D00" + "8DBFFA3C12000800" + "0000003994D49AA0" + "17D7FE92B4800200" +
			"000000106C4AB2E0" + "060A3FA2A6200080" + "00000000914B2951" + "01193FE96C480020" + "0000000058A1B8D3" +
			"003743C000AD55C1" + "E0002041A0000000" + "000000200000007A" + "5A4A2A3396EA19C7" + "0E7771177B97767D" +
			"7FFDB01C63378451" + "FD51427FFF8595D5" + "80B66382D300493F" + "40006AAE8C020140" + "0C71F3008E4BFA3C" +
			"1200080000000039" + "94DD95A017ADFE92" + "B880020000000010" + "6C4B012C060D7FA2" + "A620008000000000" +
			"914ABD6901182FE9" + "6C48002000000000" + "8C1D06D3003743C0" + "00AD55D180002041" + "A000000000000020" +
			"0000007A5A4A2A33" + "92EB99C6FEEB2D31" + "A111BBC881CBFFFD" + "34B7DBF5DDFAA6FF" + "FF859655808D6C0A" +
			"D300493F40006AAF" + "090201400C57BC40" + "8E6BFA3C12000800" + "0000003994E69160" + "17ACFE92B8800200" +
			"000000106C4B4FC4" + "0603FFA2A6200080" + "00000000914A5190" + "0117EFE96C880020" + "00000000B728EAD3" +
			"003743C000AD55E1" + "20002041A0000000" + "000000200000007A" + "5A4A2A338EEC99C6" + "EF5FC14DC691011A" +
			"039E941E14C833E8" + "DEA4E77FFF85B655" + "80971DA4D300493F" + "40006AAF86020140" + "0C3D88C08E8BFA3C" +
			"2200080000000039" + "94EF8E0017ABFE92" + "B480020000000010" + "6C4B9EA805F8BFA2" + "A620008000000000" +
			"9149E5C80115BFE9" + "6C88002000000000" + "EF5ED0D3003743C0" + "00AD55F0C0002041" + "A000000000000020" +
			"0000007A5A4A2A33" + "8AEE19E6DFD59D6B" + "DC15C6738575B7FF" + "04978C305F5010FF" + "FF85B5D5887C1690" +
			"D300493F40006AB0" + "030201400C235680" + "8E7FFA3C22000800" + "0000003994F88B10" + "176EFE92B8800200" +
			"000000106C4BEDB4" + "05F0BFA2A6200080" + "0000000091497A07" + "01155FE96C880020" + "0000000040C949D3" +
			"003743C000AD5600" + "60002041A0000000" + "000000200000007A" + "5A4A2A3386EF19E6" + "C84BF18AC19D4BCF" +
			"074F021FFA7FE4A6" + "1FFB8F7FFF85B655" + "883CD5DDD300493F" + "40006AB080020140" + "0C0921C08DF3FA3C" +
			"2200080000000039" + "950187701768FE92" + "B480020000000010" + "6C4C3CAC05E6FFA2" + "A620008000000000" +
			"91490E4001109FE9" + "6C88002000000000" + "4E7EE7D3003743C0" + "00AD561000002041" + "A000000000000020" +
			"0000007A5A4A2A33" + "82F099E6C0C1DDA8" + "2723F12589262200" + "E5A03D047CA64BFF" + "FF85B5D5882E093B" +
			"D300493F40006AB0" + "FD0201400BEEEBC0" + "8E23FA3C12000800" + "00000039950A83B0" + "174FFE92B4800200" +
			"000000106C4C8BB0" + "05D53FA2A5200080" + "000000009148A277" + "010F9FE96C880020" + "0000000021C3C5D3" +
			"003743C000AD561F" + "A0002041A0000000" + "000000200000007A" + "5A4A2A337EF19A06" + "B137A1C55CAAB679" +
			"0AFD1E21CE07956C" + "DD50C47FFF85B5D3" + "80186CF6"
	val bb = hexmsm2.parseAsHex().asByteBuffer()
	Rtcm3Decoder(object : IGnssDataConsumer<Rtcm3Message> {
		override fun consume(message: Rtcm3Message?, buffer: ByteBuffer, timestamp: Long?, type: Int) {
			println(message)
		}
	}, GnssUtils.gpstime()).consume(bb)
	/*println(Rtcm3UnknownMessage(bb))
	val msg = Rtcm1074(bb)
	println(msg)*/
}
